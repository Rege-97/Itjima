<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itjima_server.mapper.AgreementMapper">
  <insert id="insert" parameterType="com.itjima_server.domain.agreement.Agreement"
    useGeneratedKeys="true"
    keyProperty="id">
    INSERT INTO AGREEMENTS (item_id, status, amount, due_at, terms)
    VALUES (#{itemId}, #{status}, #{amount}, #{dueAt}, #{terms})
  </insert>
  <select id="findById" resultType="com.itjima_server.domain.agreement.Agreement">
    SELECT id,
           item_id,
           status,
           amount,
           due_at,
           terms,
           created_at,
           updated_at,
           return_date
    FROM AGREEMENTS
    WHERE id = #{id}
  </select>
  <update id="updateStatusById">
    UPDATE AGREEMENTS
    SET status = #{status}
    WHERE id = #{id}
  </update>
  <update id="updateCompleted">
    UPDATE AGREEMENTS
    SET status = 'COMPLETED',
        return_date = NOW()
    WHERE id = #{id}
  </update>
  <select id="findDetailById"
    resultType="com.itjima_server.dto.agreement.response.AgreementDetailDTO">
    SELECT a.id                      AS agreementId,
           a.status                  AS agreementStatus,
           a.amount                  AS amount,
           a.due_at                  AS dueAt,
           a.terms                   AS terms,
           a.created_at              AS createdAt,
           i.id                      AS itemId,
           i.type                    AS itemType,
           i.title                   AS itemTitle,
           i.description             AS itemDescription,
           i.status                  AS itemStatus,
           i.file_url                AS itemFileUrl,
           i.file_type               AS itemFileType,
           creditor_user.id          AS creditorId,
           creditor_user.name        AS creditorName,
           creditor_party.confirm_at AS creditorConfirmAt,
           debtor_user.id            AS debtorId,
           debtor_user.name          AS debtorName,
           debtor_party.confirm_at   AS debtorConfirmAt
    FROM AGREEMENTS a
           JOIN ITEMS i
                ON a.item_id = i.id
           JOIN AGREEMENT_PARTIES creditor_party
                ON a.id = creditor_party.agreement_id AND creditor_party.role = 'CREDITOR'
           JOIN USERS creditor_user ON creditor_party.user_id = creditor_user.id
           JOIN AGREEMENT_PARTIES debtor_party
                ON a.id = debtor_party.agreement_id AND debtor_party.role = 'DEBTOR'
           JOIN USERS debtor_user ON debtor_party.user_id = debtor_user.id
    WHERE a.id = #{id}
  </select>
  <select id="findByUserId"
    resultType="com.itjima_server.dto.agreement.response.AgreementDetailDTO">
    SELECT a.id AS agreementId,
    a.status AS agreementStatus,
    a.amount AS amount,
    a.due_at AS dueAt,
    a.terms AS terms,
    a.created_at AS createdAt,
    i.id AS itemId,
    i.type AS itemType,
    i.title AS itemTitle,
    i.description AS itemDescription,
    i.status AS itemStatus,
    i.file_url AS itemFileUrl,
    i.file_type AS itemFileType,
    creditor_user.id AS creditorId,
    creditor_user.name AS creditorName,
    creditor_party.confirm_at AS creditorConfirmAt,
    debtor_user.id AS debtorId,
    debtor_user.name AS debtorName,
    debtor_party.confirm_at AS debtorConfirmAt
    FROM AGREEMENTS a
    JOIN ITEMS i
    ON a.item_id = i.id
    JOIN AGREEMENT_PARTIES creditor_party
    ON a.id = creditor_party.agreement_id AND creditor_party.role = 'CREDITOR'
    JOIN USERS creditor_user ON creditor_party.user_id = creditor_user.id
    JOIN AGREEMENT_PARTIES debtor_party
    ON a.id = debtor_party.agreement_id AND debtor_party.role = 'DEBTOR'
    JOIN USERS debtor_user ON debtor_party.user_id = debtor_user.id
    <where>
      <if test="role == 'CREDITOR'">
        AND creditor_user.id = #{userId}
      </if>
      <if test="role == 'DEBTOR'">
        AND debtor_user.id = #{userId}
      </if>
      <if test="role == null">
        AND 1 = 0
      </if>
      <if test="lastId != null">
        AND a.id &lt; #{lastId}
      </if>
    </where>
    ORDER by a.id DESC
    LIMIT #{sizePlusOne}
  </select>
  <select id="findRecentPartnersByUserId"
    resultType="com.itjima_server.dto.user.response.RecentPartnerResponseDTO">
    SELECT
    partner_user.id AS id,
    partner_user.name AS name,
    partner_user.email AS email,
    partner_user.phone AS phone,
    recent_partners.last_agreement_id AS lastAgreementId,
    recent_partners.last_contact_at AS lastContactAt
    FROM (
    SELECT
    partner_id,
    MAX(agreement_id) AS last_agreement_id,
    MAX(created_at) AS last_contact_at
    FROM (
    -- 내가 채권자일 때 상대방(채무자) 정보
    SELECT p_debtor.user_id AS partner_id, a.id AS agreement_id, a.created_at
    FROM AGREEMENTS a
    JOIN AGREEMENT_PARTIES p_creditor ON a.id = p_creditor.agreement_id AND p_creditor.role =
    'CREDITOR'
    JOIN AGREEMENT_PARTIES p_debtor ON a.id = p_debtor.agreement_id AND p_debtor.role = 'DEBTOR'
    WHERE p_creditor.user_id = #{userId}

    UNION ALL

    -- 내가 채무자일 때 상대방(채권자) 정보
    SELECT p_creditor.user_id AS partner_id, a.id AS agreement_id, a.created_at
    FROM AGREEMENTS a
    JOIN AGREEMENT_PARTIES p_creditor ON a.id = p_creditor.agreement_id AND p_creditor.role =
    'CREDITOR'
    JOIN AGREEMENT_PARTIES p_debtor ON a.id = p_debtor.agreement_id AND p_debtor.role = 'DEBTOR'
    WHERE p_debtor.user_id = #{userId}
    ) all_partners
    GROUP BY partner_id
    ) AS recent_partners
    JOIN USERS partner_user ON recent_partners.partner_id = partner_user.id
    <where>
      <if test="lastId != null">
        AND recent_partners.last_agreement_id &lt; #{lastId}
      </if>
    </where>
    ORDER BY recent_partners.last_agreement_id DESC
    LIMIT #{sizePlusOne}
  </select>
  <select id="findOverdueAgreementIds" resultType="long">
    SELECT id
    FROM AGREEMENTS
    WHERE status = 'ACCEPTED'
      AND due_at &lt; NOW()
  </select>
  <update id="updateDueAtAndStatusById">
    UPDATE AGREEMENTS
    SET status = #{status},
        due_at = #{dueAt}
    WHERE id = #{id}
  </update>
  <update id="updateTermsById">
    UPDATE AGREEMENTS
    SET terms = #{terms}
    WHERE id = #{id}
  </update>
  <select id="findHistoryByItemId" resultType="com.itjima_server.dto.item.response.ItemAgreementHistoryResponseDTO">
    SELECT a.id,
    u.name AS debtorName,
    ap.confirm_at AS startDate,
    a.due_at AS dueDate,
    a.return_date AS returnDate,
    a.status,
    a.terms,
    DATEDIFF(a.due_at, ap.confirm_at) + 1 AS rentalDays,
    IF(a.status = 'COMPLETED' AND a.return_date > a.due_at, 1, 0) AS overdueReturn
    FROM AGREEMENTS a
    LEFT JOIN
    AGREEMENT_PARTIES ap ON a.id = ap.agreement_id AND ap.role = 'DEBTOR'
    LEFT JOIN
    USERS u ON ap.user_id = u.id
    WHERE a.item_id = #{itemId}
    <if test="lastId != null">
      AND a.id &lt; #{lastId}
    </if>
    ORDER by a.id DESC
    LIMIT #{sizePlusOne}
  </select>
  <select id="findAgreementSummariesByUserId" resultType="com.itjima_server.dto.agreement.response.AgreementSummaryResponseDTO">
    SELECT
    a.id,
    a.status,
    a.amount,
    a.terms,
    a.due_at,
    a.return_date,
    i.title AS itemTitle,
    i.type AS itemType,
    i.file_url AS itemFileUrl,
    u.name AS partnerName,
    partner_party.role AS partnerRole,
    CASE
    WHEN i.type = 'MONEY' THEN a.amount - IFNULL(t_sum.total_paid, 0)
    ELSE NULL
    END AS remainingAmount
    FROM
    AGREEMENTS a
    JOIN
    ITEMS i ON a.item_id = i.id
    JOIN
    AGREEMENT_PARTIES my_party ON a.id = my_party.agreement_id AND my_party.user_id = #{userId}
    JOIN
    AGREEMENT_PARTIES partner_party ON a.id = partner_party.agreement_id AND partner_party.user_id != #{userId}
    JOIN
    USERS u ON partner_party.user_id = u.id
    LEFT JOIN
    (SELECT agreement_id, SUM(amount) AS total_paid FROM TRANSACTIONS GROUP BY agreement_id) t_sum
    ON a.id = t_sum.agreement_id
    <where>
      <if test="role != null">
        AND my_party.role = #{role}
      </if>
      <if test="lastId != null">
        AND a.id &lt; #{lastId}
      </if>
      <if test="keyword != null and keyword != ''">
        AND (i.title LIKE CONCAT('%', #{keyword}, '%') OR u.name LIKE CONCAT('%', #{keyword}, '%'))
      </if>
    </where>
    ORDER BY
    a.id DESC
    LIMIT #{sizePlusOne}
  </select>
</mapper>